stages:
  - name: step_one
    dependencies: []
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        outputfile: '{workdir}/out.txt'
        parone: First
        partwo: Second
      step:
          process:
            process_type: 'interpolated-script-cmd'
            script: |
              echo Hello World
              echo {parone} {partwo} | tee {outputfile}
          publisher:
            publisher_type: 'frompar-pub'
            outputmap:
              outputfile: outputfile
          environment:
            environment_type: 'docker-encapsulated'
            image: busybox
  - name: step_two
    dependencies: ['step_one']
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        infile: {stages: step_one, output: outputfile, unwrap: true}
        outputfile: '{workdir}/secondout.png'
      step:
          process:
            process_type: 'interpolated-script-cmd'
            interpreter: root -b
            script: |
              #include <iostream>
              #include <fstream>
              {{
                std::ifstream t("{infile}");
                std::string str((std::istreambuf_iterator<char>(t)),
                                 std::istreambuf_iterator<char>());
                std::cout << str << std::endl;
                TString tstring(str.c_str());
                tstring.ToUpper();
                TCanvas c1;
                TH1F h("hist",tstring.Data(),100,-5,5);
                h.FillRandom("gaus",5000);
                h.Draw();
                c1.SaveAs("{outputfile}");
                return 0;
              }}
          publisher:
            publisher_type: 'frompar-pub'
            outputmap:
              outputfile: outputfile
          environment:
            environment_type: 'docker-encapsulated'
            image: lukasheinrich/preasg-root
